* PMProxy
This is a proxy tailored for University of Pinar del
RÃ­os's needs, which are the following:

- Page for giving access to users to the proxy service.
- Forbid the access to the proxy service to 
	- users whose consumption (downloaded amount of bytes)
    have exceded their assignated quota.
	- users requesting an URL at a time forbidden for
    accessing it.
- Not counting the consumption made from determined URLs.
- Reset all consumptions after certain amount of days,
  starting in a determined day. This amount is usually a
  week, and the day of reseting the quotes is the
  Saturday.
- The users must be authenticated using the university's
  Active Directory service.
- The program must log all responses made by servers in
  the Internet into a file with Squid log format. The log
  file must be reseted after determined amount of days,
  preferably at the same time the consumptions are
  reseted.
- Administration of quotas through an HTTP service.

** TODO HTTP server
Is implemented at server.go file. It handles the local requests. The former provide login and logout
functionality, through the POST and DELETE methods
respectively at the route "/logX", information and change
of group quotas, through the GET and PUT methods at the
route "/groupQuota", information of users consumption,
through the GET method at the route "/userCons".

Remote requests are handled by the package
github.com/elazarl/goproxy, when the user is logged in,
and the response size is added to its consumption. Users
whose consumption is equal or greater to their quotas are
not served, unless the request is done to determined
servers.

- Fix handlers for dealing with current QAdm
- Continue writing tests at server_test.go



** TODO Quota administration
The assignated quotas are determined by the group an user
belongs. The consumption is determined by the
ContentLength of a response multiplied by the URL's
associated coeficient.

This is implemented in the object QAdm. It also resets
the users consumption each time a cycle of determined
duration ends, starting in a determined date. These
are supplied in the QAdm's initializer as the parameters
~rd~ and ~cd~.

*** TODO Test QAdm

*** Access restrictions
It is implemented at qadm.go in the method *QAdm.CanReq.
Its specification is the following:

An user can request an url if the time when it makes the
request is outside the forbidden time interval associated
with it, and its quota hasn't been consumed, or if the url
has a consumption coeficient of 0 associated. A value less
than 0 means that the user cannot request that url,
otherwise is the coeficient of the url's consumption.

If not found the coeficient is 1. If the coeficient is 0
then url can always be requested. If the quota is finished
or the time is inside the restricted interval for that
url, then unless the coeficient is different from 0, the
url cannot be requested.


** TODO Session management
- Description of session management

** Writer Factory
The implementation of WriterFactory in Truncater moves a
file with the supplied name to a file with the same name
but with "~" appended, and creates a new file with the
supplied name.


